<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <!-- Display a documentation file generated by Visual Studio from XML comments. -->
  <!-- Copyright 2010 by Gary Gocek. -->
  <!-- Tested with C# and VS 2005 and VS 2003 -->
  <!-- Set a var with the name of the assembly for the documented project. -->
  <xsl:variable name="myAssembly">
    <xsl:value-of select="doc/assembly/name"/>
  </xsl:variable>
  <xsl:template match="doc">
    <xsl:apply-templates select="members"/>
  </xsl:template>

  <!-- All the classes and methods are grouped under members -->
  <xsl:template match="members">
    <xsl:apply-templates select="member"/>
  </xsl:template>

  <!-- Show a member - a class, method, property, etc. -->
  <xsl:template match="member">
    <!-- The whole name has the namespace, class name, and member name. -->
    <xsl:variable name="myWholeName">
      <xsl:value-of select="@name"/>
    </xsl:variable>
    <!-- The class name, method, and args follow the period after the assembly name. -->
    <xsl:variable name="myClassMethodsArgs">
      <xsl:value-of select="substring-after($myWholeName,concat($myAssembly,'.'))"/>
    </xsl:variable>
    <!-- If there is no dot within myClassMethodArgs, then all we have is the class name. -->
    <!-- Otherwise, there is one dot between the class and method. -->
    <xsl:variable name="myClass">
      <xsl:if test="contains($myClassMethodsArgs,'.')">
        <xsl:value-of select="substring-before($myClassMethodsArgs,'.')"/>
      </xsl:if>
      <xsl:if test="not(contains($myClassMethodsArgs,'.'))">
        <xsl:value-of select="$myClassMethodsArgs"/>
      </xsl:if>
    </xsl:variable>
    <!-- If there is no dot within myClassMethodArgs, use the class name as the method name. -->
    <xsl:variable name="myMethodArgs">
      <xsl:if test="contains($myClassMethodsArgs,'.')">
        <xsl:value-of select="substring-after($myClassMethodsArgs,'.')"/>
      </xsl:if>
      <xsl:if test="not(contains($myClassMethodsArgs,'.'))">
        <xsl:value-of select="$myClassMethodsArgs"/>
      </xsl:if>
    </xsl:variable>

    <!-- Show the names. Append () to method names with no args. -->
#### `<xsl:value-of select="$myClass"/>.<xsl:if test="contains($myWholeName,'M:') and contains($myWholeName,'(')"><xsl:value-of select="$myMethodArgs"/></xsl:if>
    <xsl:if test="contains($myWholeName,'M:') and not(contains($myWholeName,'('))"><xsl:value-of select="concat($myMethodArgs,'()')"/></xsl:if>
    <xsl:if test="not(contains($myWholeName,'M:'))"><xsl:value-of select="$myMethodArgs"/></xsl:if>`<xsl:apply-templates select="summary"/>
<xsl:apply-templates select="param"/>
<xsl:apply-templates select="returns"/>
<xsl:apply-templates select="exception"/>
    <xsl:text>&#xa;</xsl:text>
  </xsl:template>

  <xsl:template match="summary">
_Summary:_ <xsl:value-of select="normalize-space(.)"/>
  </xsl:template>

  <xsl:template match="param">
_Param:_ **<xsl:value-of select="@name"/>** - <xsl:value-of select="normalize-space(.)"/>
  </xsl:template>

  <!-- Show the returns. Note that the XML file does not provide the actual datatype that is returned,
			so it can be helpful to include that in the returns comment. -->
  <xsl:template match="returns">
_Returns:_ <xsl:value-of select="."/>
  </xsl:template>

  <xsl:template match="exception">
_Exception:_ (<xsl:value-of select="@cref"/>) <xsl:value-of select="normalize-space(.)"/>
  </xsl:template>
</xsl:stylesheet>
